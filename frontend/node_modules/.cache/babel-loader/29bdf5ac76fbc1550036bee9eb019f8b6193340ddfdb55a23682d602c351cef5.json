{"ast":null,"code":"var _jsxFileName = \"E:\\\\Programming\\\\VS Code Work\\\\MERN Chat App\\\\frontend\\\\src\\\\Context\\\\ChatProvider.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// This code sets up a context for managing the user's authentication state in a React application. It checks if the user is logged in by looking for userInfo in the local storage. If the user is not logged in, they are redirected to the login page. The user state and the setUser function are made available to other components through the ChatContext, allowing them to access and modify the user's authentication state as needed.\n\nimport { createContext, useContext, useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router-dom/cjs/react-router-dom.min\";\n\n// Create a new context called ChatContext\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatContext = /*#__PURE__*/createContext();\n\n// Define the ChatProvider component\nconst ChatProvider = ({\n  children\n}) => {\n  _s();\n  // State to hold the user's information\n  const [user, setUser] = useState(\"\");\n\n  // State to hold selected chat\n  const [selectedChat, setSelectedChat] = useState();\n\n  // State to hold all the chats\n  const [chats, setChats] = useState([]);\n\n  // checking if the user is not logged in then push it to the \"/\" route\n  // Get the history object from react-router-dom\n  const history = useHistory();\n\n  // Use the useEffect hook to check if the user is logged in\n  useEffect(() => {\n    // Retrieve the user's information from the local storage\n    const userInfo = JSON.parse(localStorage.getItem(\"userInfo\"));\n    console.log(\"userinfo: \");\n\n    // Update the user state with the retrieved information\n    setUser(userInfo);\n\n    // If the user is not logged in (userInfo is falsy), redirect to the root path\n    if (!userInfo) {\n      history.push(\"/\");\n    }\n  }, [history]);\n\n  // make user state global by putting it with value attribute\n  // Render the provider component and pass the user state and setUser function as the context value\n  return /*#__PURE__*/_jsxDEV(ChatContext.Provider, {\n    value: {\n      user,\n      setUser,\n      selectedChat,\n      setSelectedChat,\n      chats,\n      setChats\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n};\n\n// Define a custom hook to consume the ChatContext\n_s(ChatProvider, \"U7q4qmbqK7vOcuD+PmQUzr2Q4Nc=\", false, function () {\n  return [useHistory];\n});\n_c = ChatProvider;\nexport const ChatState = () => {\n  _s2();\n  return useContext(ChatContext);\n};\n_s2(ChatState, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n_c2 = ChatState;\nexport default ChatProvider;\nvar _c, _c2;\n$RefreshReg$(_c, \"ChatProvider\");\n$RefreshReg$(_c2, \"ChatState\");","map":{"version":3,"names":["createContext","useContext","useEffect","useState","useHistory","jsxDEV","_jsxDEV","ChatContext","ChatProvider","children","_s","user","setUser","selectedChat","setSelectedChat","chats","setChats","history","userInfo","JSON","parse","localStorage","getItem","console","log","push","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","ChatState","_s2","_c2","$RefreshReg$"],"sources":["E:/Programming/VS Code Work/MERN Chat App/frontend/src/Context/ChatProvider.js"],"sourcesContent":["// This code sets up a context for managing the user's authentication state in a React application. It checks if the user is logged in by looking for userInfo in the local storage. If the user is not logged in, they are redirected to the login page. The user state and the setUser function are made available to other components through the ChatContext, allowing them to access and modify the user's authentication state as needed.\r\n\r\nimport { createContext, useContext, useEffect, useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom/cjs/react-router-dom.min\";\r\n\r\n// Create a new context called ChatContext\r\nconst ChatContext = createContext();\r\n\r\n// Define the ChatProvider component\r\nconst ChatProvider = ({ children }) => {\r\n  // State to hold the user's information\r\n  const [user, setUser] = useState(\"\");\r\n\r\n  // State to hold selected chat\r\n  const [selectedChat, setSelectedChat] = useState();\r\n\r\n  // State to hold all the chats\r\n  const [chats, setChats] = useState([]);\r\n\r\n  // checking if the user is not logged in then push it to the \"/\" route\r\n  // Get the history object from react-router-dom\r\n  const history = useHistory();\r\n\r\n  // Use the useEffect hook to check if the user is logged in\r\n  useEffect(() => {\r\n    // Retrieve the user's information from the local storage\r\n    const userInfo = JSON.parse(localStorage.getItem(\"userInfo\"));\r\n    console.log(\"userinfo: \", )\r\n\r\n    // Update the user state with the retrieved information\r\n    setUser(userInfo);\r\n\r\n    // If the user is not logged in (userInfo is falsy), redirect to the root path\r\n    if (!userInfo) {\r\n      history.push(\"/\");\r\n    }\r\n  }, [history]);\r\n\r\n  // make user state global by putting it with value attribute\r\n  // Render the provider component and pass the user state and setUser function as the context value\r\n  return (\r\n    <ChatContext.Provider\r\n      value={{ user, setUser, selectedChat, setSelectedChat, chats, setChats }}\r\n    >\r\n      {children}\r\n    </ChatContext.Provider>\r\n  );\r\n};\r\n\r\n// Define a custom hook to consume the ChatContext\r\nexport const ChatState = () => {\r\n  return useContext(ChatContext);\r\n};\r\n\r\nexport default ChatProvider;\r\n"],"mappings":";;;AAAA;;AAEA,SAASA,aAAa,EAAEC,UAAU,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AACtE,SAASC,UAAU,QAAQ,2CAA2C;;AAEtE;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,WAAW,gBAAGP,aAAa,CAAC,CAAC;;AAEnC;AACA,MAAMQ,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EACrC;EACA,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;;EAEpC;EACA,MAAM,CAACU,YAAY,EAAEC,eAAe,CAAC,GAAGX,QAAQ,CAAC,CAAC;;EAElD;EACA,MAAM,CAACY,KAAK,EAAEC,QAAQ,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;;EAEtC;EACA;EACA,MAAMc,OAAO,GAAGb,UAAU,CAAC,CAAC;;EAE5B;EACAF,SAAS,CAAC,MAAM;IACd;IACA,MAAMgB,QAAQ,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC,CAAC;IAC7DC,OAAO,CAACC,GAAG,CAAC,YAAc,CAAC;;IAE3B;IACAZ,OAAO,CAACM,QAAQ,CAAC;;IAEjB;IACA,IAAI,CAACA,QAAQ,EAAE;MACbD,OAAO,CAACQ,IAAI,CAAC,GAAG,CAAC;IACnB;EACF,CAAC,EAAE,CAACR,OAAO,CAAC,CAAC;;EAEb;EACA;EACA,oBACEX,OAAA,CAACC,WAAW,CAACmB,QAAQ;IACnBC,KAAK,EAAE;MAAEhB,IAAI;MAAEC,OAAO;MAAEC,YAAY;MAAEC,eAAe;MAAEC,KAAK;MAAEC;IAAS,CAAE;IAAAP,QAAA,EAExEA;EAAQ;IAAAmB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;;AAED;AAAArB,EAAA,CAxCMF,YAAY;EAAA,QAYAJ,UAAU;AAAA;AAAA4B,EAAA,GAZtBxB,YAAY;AAyClB,OAAO,MAAMyB,SAAS,GAAGA,CAAA,KAAM;EAAAC,GAAA;EAC7B,OAAOjC,UAAU,CAACM,WAAW,CAAC;AAChC,CAAC;AAAC2B,GAAA,CAFWD,SAAS;AAAAE,GAAA,GAATF,SAAS;AAItB,eAAezB,YAAY;AAAC,IAAAwB,EAAA,EAAAG,GAAA;AAAAC,YAAA,CAAAJ,EAAA;AAAAI,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}