{"ast":null,"code":"var _jsxFileName = \"E:\\\\Programming\\\\VS Code Work\\\\MERN Chat App\\\\frontend\\\\src\\\\Pages\\\\Chatpage.js\";\nimport React from \"react\";\nimport axios from \"axios\";\nimport { ChatState } from \"../Context/ChatProvider\";\nimport { Box } from \"@chakra-ui/react\";\nimport SideDrawer from \"../Components/Miscellaneous/SideDrawer\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chatpage = () => {\n  // user state from context api\n  const {\n    user\n  } = ChatState();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: \"100%\"\n    },\n    children: [user && /*#__PURE__*/_jsxDEV(SideDrawer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 16\n    }, this), /*#__PURE__*/_jsxDEV(Box, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 5\n  }, this);\n};\n_c = Chatpage;\nexport default Chatpage;\n\n// initial unused code of Chat Page\n\n// const Chatpage = () => {\n//   const [chats, setChats] = useState([]);\n//     // const fetchChats = async () => {\n//     //   const response = await axios.get(\"/api/chats\");\n//     //   setChats(response.data.data);\n//     //   console.log(\"API response:\", response.data); // Log the entire response\n//     // };\n//   const fetchChats = async () => {\n//     try {\n//       const response = await axios.get(\"/api/chats\");\n//       console.log(\"API response:\", response.data); // Log the entire response\n//       if (Array.isArray(response.data.data)) {\n//         setChats(response.data.data);\n//       } else {\n//         console.error(\"Received data is not an array:\", response.data.data);\n//         setChats([]);\n//       }\n//     } catch (error) {\n//       console.error(\"Error fetching chats:\", error);\n//       setChats([]);\n//     }\n//   };\n\n//   useEffect(() => {\n//     fetchChats();\n//   }, []);\n\n//     // return (\n//     //   <div>\n//     //     {chats.map((chat) => (\n//     //       <div key={chat._id}>{chat.chatName}</div>\n//     //     ))}\n//     //   </div>\n//     // );\n//   return (\n//     <div>\n//       {chats && chats.length > 0 ? (\n//         chats.map((chat, index) => (\n//           <div key={chat._id || index}>\n//             {chat.chatName || chat.name || \"Unnamed Chat\"}\n//           </div>\n//         ))\n//       ) : (\n//         <p>No chats available</p>\n//       )}\n//     </div>\n//   );\n// };\nvar _c;\n$RefreshReg$(_c, \"Chatpage\");","map":{"version":3,"names":["React","axios","ChatState","Box","SideDrawer","jsxDEV","_jsxDEV","Chatpage","user","style","width","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["E:/Programming/VS Code Work/MERN Chat App/frontend/src/Pages/Chatpage.js"],"sourcesContent":["import React from \"react\";\r\nimport axios from \"axios\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\nimport { Box } from \"@chakra-ui/react\";\r\nimport SideDrawer from \"../Components/Miscellaneous/SideDrawer\";\r\n\r\nconst Chatpage = () => {\r\n  // user state from context api\r\n  const { user } = ChatState();\r\n  return (\r\n    <div\r\n      style={{\r\n        width: \"100%\"\r\n      }}\r\n    >\r\n      {user && <SideDrawer/>}\r\n      <Box>\r\n        {/* {user && <MyChats/>} */}\r\n        {/* {user && <ChatBox/>} */}\r\n      </Box>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chatpage;\r\n\r\n// initial unused code of Chat Page\r\n\r\n// const Chatpage = () => {\r\n//   const [chats, setChats] = useState([]);\r\n//     // const fetchChats = async () => {\r\n//     //   const response = await axios.get(\"/api/chats\");\r\n//     //   setChats(response.data.data);\r\n//     //   console.log(\"API response:\", response.data); // Log the entire response\r\n//     // };\r\n//   const fetchChats = async () => {\r\n//     try {\r\n//       const response = await axios.get(\"/api/chats\");\r\n//       console.log(\"API response:\", response.data); // Log the entire response\r\n//       if (Array.isArray(response.data.data)) {\r\n//         setChats(response.data.data);\r\n//       } else {\r\n//         console.error(\"Received data is not an array:\", response.data.data);\r\n//         setChats([]);\r\n//       }\r\n//     } catch (error) {\r\n//       console.error(\"Error fetching chats:\", error);\r\n//       setChats([]);\r\n//     }\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     fetchChats();\r\n//   }, []);\r\n\r\n//     // return (\r\n//     //   <div>\r\n//     //     {chats.map((chat) => (\r\n//     //       <div key={chat._id}>{chat.chatName}</div>\r\n//     //     ))}\r\n//     //   </div>\r\n//     // );\r\n//   return (\r\n//     <div>\r\n//       {chats && chats.length > 0 ? (\r\n//         chats.map((chat, index) => (\r\n//           <div key={chat._id || index}>\r\n//             {chat.chatName || chat.name || \"Unnamed Chat\"}\r\n//           </div>\r\n//         ))\r\n//       ) : (\r\n//         <p>No chats available</p>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// };\r\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,SAAS,QAAQ,yBAAyB;AACnD,SAASC,GAAG,QAAQ,kBAAkB;AACtC,OAAOC,UAAU,MAAM,wCAAwC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhE,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EACrB;EACA,MAAM;IAAEC;EAAK,CAAC,GAAGN,SAAS,CAAC,CAAC;EAC5B,oBACEI,OAAA;IACEG,KAAK,EAAE;MACLC,KAAK,EAAE;IACT,CAAE;IAAAC,QAAA,GAEDH,IAAI,iBAAIF,OAAA,CAACF,UAAU;MAAAQ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC,eACtBT,OAAA,CAACH,GAAG;MAAAS,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAGC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAACC,EAAA,GAhBIT,QAAQ;AAkBd,eAAeA,QAAQ;;AAEvB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA,IAAAS,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}