{"ast":null,"code":"var _jsxFileName = \"E:\\\\Programming\\\\VS Code Work\\\\MERN Chat App\\\\frontend\\\\src\\\\Components\\\\MyChats.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { ChatState } from \"../Context/ChatProvider\";\nimport axios from \"axios\";\nimport { Box, Button, Stack, Text, useToast } from \"@chakra-ui/react\";\nimport { AddIcon } from \"@chakra-ui/icons\";\nimport ChatLoading from \"./ChatLoading\";\nimport { getSender } from \"../Config/ChatLogics\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MyChats = () => {\n  _s();\n  // const [loggedUser, setLoggedUser] = useState();\n  const [loggedUser, setLoggedUser] = useState(JSON.parse(localStorage.getItem(\"userInfo\")));\n  const {\n    selectedChat,\n    setSelectedChat,\n    user,\n    chats,\n    setChats\n  } = ChatState();\n\n  // const [loading, setLoading] = useState(true); // Add loading state\n\n  const toast = useToast();\n  const fetchChats = async () => {\n    try {\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`\n        }\n      };\n      const {\n        data\n      } = await axios.get(\"/api/chat\", config);\n\n      // console.log(\"Fetched chats:\", data); // Debug log\n      // console.log(\n      //   \"Chat IDs:\",\n      //   data.map((chat) => chat._id)\n      // );\n      setChats(data);\n    } catch (error) {\n      console.error(\"Error fetching chats:\", error);\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the chats\",\n        status: \"error\",\n        duration: 3000,\n        isClosable: true,\n        position: \"top-left\"\n      });\n    }\n  };\n  useEffect(() => {\n    // const userInfo = JSON.parse(localStorage.getItem(\"userInfo\"));\n    // if (userInfo) {\n    //   setLoggedUser(userInfo);\n    // }\n    fetchChats();\n  }, []);\n  return (\n    /*#__PURE__*/\n    // <Box\n    //   display={{ base: selectedChat ? \"none\" : \"flex\", md: \"flex\" }}\n    //   flexDir=\"column\"\n    //   alignItems=\"center\"\n    //   p={3}\n    //   bg=\"white\"\n    //   w={{ base: \"100%\", md: \"31%\" }}\n    //   borderRadius=\"lg\"\n    //   borderWidth={\"1px\"}\n    // >\n    //   {/* Header of the Chat */}\n    //   <Box\n    //     pb={3}\n    //     px={3}\n    //     fontSize={{ base: \"28px\", md: \"30px\" }}\n    //     fontFamily=\"Helvetica\"\n    //     display=\"flex\"\n    //     w=\"100%\"\n    //     justifyContent=\"space-between\"\n    //     alignItems=\"center\"\n    //   >\n    //     My Chats\n    //     <Button\n    //       display=\"flex\"\n    //       fontSize={{ base: \"17px\", md: \"10px\", lg: \"17px\" }}\n    //       // rightIcon={<AddIcon />}\n    //       gap={\"2\"}\n    //     >\n    //       <Text alignItems=\"center\" size={\"15px\"} paddingTop={\"1\"}>\n    //         New Group Chat\n    //       </Text>\n    //       <AddIcon fontSize=\"15px\" />\n    //     </Button>\n    //   </Box>\n    //   {/* Render all the chats */}\n    //   <Box\n    //     display=\"flex\"\n    //     flexDir=\"column\"\n    //     p={3}\n    //     bg=\"#F8F8F8\"\n    //     w=\"100%\"\n    //     h=\"100%\"\n    //     borderRadius=\"lg\"\n    //     overflowY=\"hidden\"\n    //   >\n    //     {chats ? (\n    //       <Stack overflowY=\"scroll\">\n    //         {chats.map((chat) => (\n    //           <Box\n    //             onClick={() => setSelectedChat(chat)}\n    //             cursor=\"pointer\"\n    //             bg={selectedChat === chat ? \"#38B2AC\" : \"#E8E8E8\"}\n    //             color={selectedChat === chat ? \"white\" : \"black\"}\n    //             px={3}\n    //             py={2}\n    //             borderRadius=\"lg\"\n    //             key={chat._id}\n    //           >\n    //             <Text>\n    //               {/* {!chat.isGroupChat\n    //                 ? getSender(loggedUser, chat.users)\n    //                 : chat.chatName} */}\n    //               {!chat.isGroupChat && loggedUser && chat.users\n    //                 ? getSender(loggedUser, chat.users)\n    //                 : chat.chatName}\n    //             </Text>\n    //           </Box>\n    //         ))}\n    //       </Stack>\n    //     ) : (\n    //       <ChatLoading />\n    //     )}\n    //   </Box>\n    // </Box>\n    _jsxDEV(\"div\", {\n      children: \"My chats\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 5\n    }, this)\n  );\n};\n_s(MyChats, \"Jn/3ls/KlBzk6tUPC4y3vAy0wd8=\", false, function () {\n  return [useToast];\n});\n_c = MyChats;\nexport default MyChats;\nvar _c;\n$RefreshReg$(_c, \"MyChats\");","map":{"version":3,"names":["React","useEffect","useState","ChatState","axios","Box","Button","Stack","Text","useToast","AddIcon","ChatLoading","getSender","jsxDEV","_jsxDEV","MyChats","_s","loggedUser","setLoggedUser","JSON","parse","localStorage","getItem","selectedChat","setSelectedChat","user","chats","setChats","toast","fetchChats","config","headers","Authorization","token","data","get","error","console","title","description","status","duration","isClosable","position","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["E:/Programming/VS Code Work/MERN Chat App/frontend/src/Components/MyChats.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\nimport axios from \"axios\";\r\nimport { Box, Button, Stack, Text, useToast } from \"@chakra-ui/react\";\r\nimport { AddIcon } from \"@chakra-ui/icons\";\r\nimport ChatLoading from \"./ChatLoading\";\r\nimport { getSender } from \"../Config/ChatLogics\";\r\n\r\nconst MyChats = () => {\r\n  // const [loggedUser, setLoggedUser] = useState();\r\n  const [loggedUser, setLoggedUser] = useState(\r\n    JSON.parse(localStorage.getItem(\"userInfo\"))\r\n  );\r\n  const { selectedChat, setSelectedChat, user, chats, setChats } = ChatState();\r\n\r\n  // const [loading, setLoading] = useState(true); // Add loading state\r\n\r\n  const toast = useToast();\r\n\r\n  const fetchChats = async () => {\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.get(\"/api/chat\", config);\r\n\r\n      // console.log(\"Fetched chats:\", data); // Debug log\r\n      // console.log(\r\n      //   \"Chat IDs:\",\r\n      //   data.map((chat) => chat._id)\r\n      // );\r\n      setChats(data);\r\n    } catch (error) {\r\n      console.error(\"Error fetching chats:\", error);\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: \"Failed to Load the chats\",\r\n        status: \"error\",\r\n        duration: 3000,\r\n        isClosable: true,\r\n        position: \"top-left\",\r\n      });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    // const userInfo = JSON.parse(localStorage.getItem(\"userInfo\"));\r\n    // if (userInfo) {\r\n    //   setLoggedUser(userInfo);\r\n    // }\r\n    fetchChats();\r\n  }, []);\r\n\r\n  return (\r\n    // <Box\r\n    //   display={{ base: selectedChat ? \"none\" : \"flex\", md: \"flex\" }}\r\n    //   flexDir=\"column\"\r\n    //   alignItems=\"center\"\r\n    //   p={3}\r\n    //   bg=\"white\"\r\n    //   w={{ base: \"100%\", md: \"31%\" }}\r\n    //   borderRadius=\"lg\"\r\n    //   borderWidth={\"1px\"}\r\n    // >\r\n    //   {/* Header of the Chat */}\r\n    //   <Box\r\n    //     pb={3}\r\n    //     px={3}\r\n    //     fontSize={{ base: \"28px\", md: \"30px\" }}\r\n    //     fontFamily=\"Helvetica\"\r\n    //     display=\"flex\"\r\n    //     w=\"100%\"\r\n    //     justifyContent=\"space-between\"\r\n    //     alignItems=\"center\"\r\n    //   >\r\n    //     My Chats\r\n    //     <Button\r\n    //       display=\"flex\"\r\n    //       fontSize={{ base: \"17px\", md: \"10px\", lg: \"17px\" }}\r\n    //       // rightIcon={<AddIcon />}\r\n    //       gap={\"2\"}\r\n    //     >\r\n    //       <Text alignItems=\"center\" size={\"15px\"} paddingTop={\"1\"}>\r\n    //         New Group Chat\r\n    //       </Text>\r\n    //       <AddIcon fontSize=\"15px\" />\r\n    //     </Button>\r\n    //   </Box>\r\n    //   {/* Render all the chats */}\r\n    //   <Box\r\n    //     display=\"flex\"\r\n    //     flexDir=\"column\"\r\n    //     p={3}\r\n    //     bg=\"#F8F8F8\"\r\n    //     w=\"100%\"\r\n    //     h=\"100%\"\r\n    //     borderRadius=\"lg\"\r\n    //     overflowY=\"hidden\"\r\n    //   >\r\n    //     {chats ? (\r\n    //       <Stack overflowY=\"scroll\">\r\n    //         {chats.map((chat) => (\r\n    //           <Box\r\n    //             onClick={() => setSelectedChat(chat)}\r\n    //             cursor=\"pointer\"\r\n    //             bg={selectedChat === chat ? \"#38B2AC\" : \"#E8E8E8\"}\r\n    //             color={selectedChat === chat ? \"white\" : \"black\"}\r\n    //             px={3}\r\n    //             py={2}\r\n    //             borderRadius=\"lg\"\r\n    //             key={chat._id}\r\n    //           >\r\n    //             <Text>\r\n    //               {/* {!chat.isGroupChat\r\n    //                 ? getSender(loggedUser, chat.users)\r\n    //                 : chat.chatName} */}\r\n\r\n    //               {!chat.isGroupChat && loggedUser && chat.users\r\n    //                 ? getSender(loggedUser, chat.users)\r\n    //                 : chat.chatName}\r\n    //             </Text>\r\n    //           </Box>\r\n    //         ))}\r\n    //       </Stack>\r\n    //     ) : (\r\n    //       <ChatLoading />\r\n    //     )}\r\n    //   </Box>\r\n    // </Box>\r\n\r\n    <div>My chats</div>\r\n  );\r\n};\r\n\r\nexport default MyChats;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,SAAS,QAAQ,yBAAyB;AACnD,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,GAAG,EAAEC,MAAM,EAAEC,KAAK,EAAEC,IAAI,EAAEC,QAAQ,QAAQ,kBAAkB;AACrE,SAASC,OAAO,QAAQ,kBAAkB;AAC1C,OAAOC,WAAW,MAAM,eAAe;AACvC,SAASC,SAAS,QAAQ,sBAAsB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjD,MAAMC,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACpB;EACA,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGhB,QAAQ,CAC1CiB,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC,CAC7C,CAAC;EACD,MAAM;IAAEC,YAAY;IAAEC,eAAe;IAAEC,IAAI;IAAEC,KAAK;IAAEC;EAAS,CAAC,GAAGxB,SAAS,CAAC,CAAC;;EAE5E;;EAEA,MAAMyB,KAAK,GAAGnB,QAAQ,CAAC,CAAC;EAExB,MAAMoB,UAAU,GAAG,MAAAA,CAAA,KAAY;IAC7B,IAAI;MACF,MAAMC,MAAM,GAAG;QACbC,OAAO,EAAE;UACPC,aAAa,EAAE,UAAUP,IAAI,CAACQ,KAAK;QACrC;MACF,CAAC;MACD,MAAM;QAAEC;MAAK,CAAC,GAAG,MAAM9B,KAAK,CAAC+B,GAAG,CAAC,WAAW,EAAEL,MAAM,CAAC;;MAErD;MACA;MACA;MACA;MACA;MACAH,QAAQ,CAACO,IAAI,CAAC;IAChB,CAAC,CAAC,OAAOE,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC7CR,KAAK,CAAC;QACJU,KAAK,EAAE,gBAAgB;QACvBC,WAAW,EAAE,0BAA0B;QACvCC,MAAM,EAAE,OAAO;QACfC,QAAQ,EAAE,IAAI;QACdC,UAAU,EAAE,IAAI;QAChBC,QAAQ,EAAE;MACZ,CAAC,CAAC;IACJ;EACF,CAAC;EAED1C,SAAS,CAAC,MAAM;IACd;IACA;IACA;IACA;IACA4B,UAAU,CAAC,CAAC;EACd,CAAC,EAAE,EAAE,CAAC;EAEN;IAAA;IACE;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAEAf,OAAA;MAAA8B,QAAA,EAAK;IAAQ;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK;EAAC;AAEvB,CAAC;AAAChC,EAAA,CA9HID,OAAO;EAAA,QASGN,QAAQ;AAAA;AAAAwC,EAAA,GATlBlC,OAAO;AAgIb,eAAeA,OAAO;AAAC,IAAAkC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}